/**
 * Partie 6 - Classes
 */

class Human {
    public gender: string = '';
    public height: number = 0;
    public weight: number = 0;

    private _etnic: string = '';
    protected __colorEyes: string = 'blue';
}

// Encapsulation 
// ‚Üí Le niveau de port√©e des propri√©t√©s dans le classe

// public       ‚Üí disponible partout
// protected    ‚Üí disponible uniquement dans la classe parent et dans les classes enfants (TypeScript !)
// private      ‚Üí disponible uniquement dans la classe (TypeScript !)
// #            -> cfr. private - rendre invisible en dehors de la classe (JS)

// H√©ritage
// Transmettre les membres d'une classe parent √† ses classes enfants
// Pour faire de l'h√©ritage, on utilise extends
// ü™ß Un parent ne peut pas acc√©der √† une propri√©t√© d'un enfant, par contre l'inverse oui !
// ü™ß Le constructeur du parent devra toujours √™tre appel√© dans celui de l'enfant

// Intialisation des propri√©t√©s
// prop: type = valeur  ‚Üí Initialisation par d√©faut des valeurs
// prop!: type          ‚Üí Pas besoin d'initialiser lors de la d√©claration mais doit √™tre initialiser dans le constructeur (sauf abstract)
// prop?: type          ‚Üí Peut prendre la valeur du type associ√© ou undefined

class Person extends Human {

    public id: number;
    public name?: string;
    private firstname: string;
    #_password?: string;

    private _upperPassword: Function = (password: string): string => {
        return password.toUpperCase();
    };

    constructor (id: number, name: string, firstname?: string, password?: string) {
        super(); // Permet de cr√©er le parent

        if (!password) password = 'Coucou';
        this.#_password = this._upperPassword(password);
        this.id = id;
        this.name = name;

        this.__colorEyes = 'red';
    }

}

export class MyUser extends Person {

    public login: string = '';

    constructor (id: number, name: string, firstname?: string, password?: string) {
        super(id, name, firstname, password);
        this.__colorEyes = 'yellow';
    }

}